[project]
name = "subt-ai-tles"
requires-python = ">=3.10"
version = "0.0.2"
description = ""
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "xyzjonas", email = "you@example.com"},
]

packages = [
    { from = "src", include = "subtaitles" }
]
dependencies = [
    "openai<2.0.0,>=1.3.6",
    "libretranslatepy<3.0.0,>=2.1.3",
    "pysrt<2.0.0,>=1.1.2",
    "deepl<2.0.0,>=1.16.1",
    "srt<4.0.0,>=3.5.3",
    "pydantic-settings>=2.10.1",
    "pydantic-ai-slim[openai]>=1.0.10",
]

[project.urls]
Homepage = "https://github.com/xyzjonas/subt-ai-tles"

[project.scripts]
translate_subtitles = "subtaitles.cli:main"

[build-system]
requires = ["uv_build>=0.8.17,<0.9.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-name = "subtaitles"


[dependency-groups]
dev = [
    "mypy>=1.18.2",
    "pytest-asyncio>=0.23.2,<1.0.0",
    "pytest-dotenv<1.0.0,>=0.5.2",
    "pytest<8.0.0,>=7.4.3",
    "ruff>=0.13.1",
    "tox>=4.30.2",
]

[tool.pytest.ini_options]
asyncio_mode = "auto" # or "strict"

[tool.ruff]
# Target Python version
target-version = "py313"

# Line length
line-length = 95

# Enable ALL available rule categories
lint.select = [
    # Pyflakes (F)
    "F",
    # pycodestyle errors (E) and warnings (W)
    "E", "W",
    # mccabe complexity (C90)
    "C90",
    # isort (I)
    "I",
    # pep8-naming (N)
    "N",
    # pydocstyle (D)
    "D",
    # pyupgrade (UP)
    "UP",
    # flake8-2020 (YTT)
    "YTT",
    # flake8-annotations (ANN)
    "ANN",
    # flake8-async (ASYNC)
    "ASYNC",
    # flake8-bandit (S)
    "S",
    # flake8-blind-except (BLE)
    "BLE",
    # flake8-boolean-trap (FBT)
    "FBT",
    # flake8-bugbear (B)
    "B",
    # flake8-builtins (A)
    "A",
    # flake8-commas (COM)
    "COM",
    # flake8-comprehensions (C4)
    "C4",
    # flake8-datetime (DTZ)
    "DTZ",
    # flake8-debugger (T10)
    "T10",
    # flake8-django (DJ)
    "DJ",
    # flake8-errmsg (EM)
    "EM",
    # flake8-executable (EXE)
    "EXE",
    # flake8-future-annotations (FA)
    "FA",
    # flake8-implicit-str-concat (ISC)
    "ISC",
    # flake8-import-conventions (ICN)
    "ICN",
    # flake8-logging-format (G)
    "G",
    # flake8-no-pep420 (INP)
    "INP",
    # flake8-pie (PIE)
    "PIE",
    # flake8-print (T20)
    "T20",
    # flake8-pyi (PYI)
    "PYI",
    # flake8-pytest-style (PT)
    "PT",
    # flake8-quotes (Q)
    "Q",
    # flake8-raise (RSE)
    "RSE",
    # flake8-return (RET)
    "RET",
    # flake8-self (SLF)
    "SLF",
    # flake8-simplify (SIM)
    "SIM",
    # flake8-slots (SLOT)
    "SLOT",
    # flake8-tidy-imports (TID)
    "TID",
    # flake8-type-checking (TCH)
    "TCH",
    # flake8-gettext (INT)
    "INT",
    # flake8-unused-arguments (ARG)
    "ARG",
    # flake8-use-pathlib (PTH)
    "PTH",
    # pandas-vet (PD)
    "PD",
    # pygrep-hooks (PGH)
    "PGH",
    # Pylint (PL)
    "PL",
    # tryceratops (TRY)
    "TRY",
    # flynt (FLY)
    "FLY",
    # NumPy-specific rules (NPY)
    "NPY",
    # Airflow (AIR)
    "AIR",
    # Perflint (PERF)
    "PERF",
    # refurb (FURB)
    "FURB",
    # flake8-logging (LOG)
    "LOG",
    # Ruff-specific rules (RUF)
    "RUF",
]

# Ignore specific rules that might be too strict or conflicting
lint.ignore = [
    # These are commonly ignored rules that might be too strict:
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D106",  # Missing docstring in public nested class
    "D107",  # Missing docstring in __init__
    "D211",
    "D213",
    "COM812", # Trailing comma missing (conflicts with formatter)
    "ISC001", # Implicitly concatenated string literals (conflicts with formatter)
    "S101",
]
